<?php
namespace python;

/**

    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
*/
class ast
{
    /**
    * @return ast
    */
    public static function import()
    {
        return \PyCore::import('ast');
    }

    public $PyCF_ALLOW_TOP_LEVEL_AWAIT = 8192;
    public $PyCF_ONLY_AST = 1024;
    public $PyCF_TYPE_COMMENTS = 4096;

    public $_INFSTR = "1e309";
    public $__name__ = "ast";
    public $__package__ = "";

    public $Bytes = null;
    public $Ellipsis = null;
    public $IntEnum = null;
    public $NameConstant = null;
    public $Num = null;
    public $Str = null;
    public $_ALL_QUOTES = null;
    public $_MULTI_QUOTES = null;
    public $_Precedence = null;
    public $_SINGLE_QUOTES = null;
    public $_const_node_type_names = null;
    public $_const_types = null;
    public $_const_types_not = null;
    public $nullcontext = null;
    public $sys = null;

    /**
    * @return mixed
    */
    public function _dims_getter($self)
    {
    }

    /**
    * @return mixed
    */
    public function _dims_setter($self, $value)
    {
    }

    /**
    * @return mixed
    */
    public function _getter($self)
    {
    }

    /**
    * @return mixed
    */
    public function _new($cls)
    {
    }

    /**
    * @return mixed
    */
    public function _pad_whitespace($source)
    {
    }

    /**
    * @return mixed
    */
    public function _setter($self, $value)
    {
    }

    /**
    * @return mixed
    */
    public function _splitlines_no_ff($source)
    {
    }

    /**
    * @return mixed
    */
    public function contextmanager($func)
    {
    }

    /**
    * @return mixed
    */
    public function copy_location($new_node, $old_node)
    {
    }

    /**
    * @return mixed
    */
    public function dump($node, $annotate_fields = true, $include_attributes = false)
    {
    }

    /**
    * @return mixed
    */
    public function fix_missing_locations($node)
    {
    }

    /**
    * @return mixed
    */
    public function get_docstring($node, $clean = true)
    {
    }

    /**
    * @return mixed
    */
    public function get_source_segment($source, $node)
    {
    }

    /**
    * @return mixed
    */
    public function increment_lineno($node, $n = 1)
    {
    }

    /**
    * @return mixed
    */
    public function iter_child_nodes($node)
    {
    }

    /**
    * @return mixed
    */
    public function iter_fields($node)
    {
    }

    /**
    * @return mixed
    */
    public function literal_eval($node_or_string)
    {
    }

    /**
    * @return mixed
    */
    public function main()
    {
    }

    /**
    * @return mixed
    */
    public function parse($source, $filename = "<unknown>", $mode = "exec")
    {
    }

    /**
    * @return mixed
    */
    public function unparse($ast_obj)
    {
    }

    /**
    * @return mixed
    */
    public function walk($node)
    {
    }

}
